#!/usr/bin/env gst
"/* vim: set filetype=st : */ "

"=== Timm Tricks ================================="
FileStream fileIn: 'my.st'!

"===| Misc setup |=============================="
Magic sub: #Employee has: 'name age shoesize'

! Employee methods !
init
  self name: 'freda';
       age:  21;
       shoesize:  0 !

printOn: aStream
  aStream 
     nextPutAll: 'Emp(';
     nextPutAll: ':name ',name s;
     nextPutAll: ' :age ',age s;
     nextPutAll: ' :shoesize ',shoesize s;
     nextPutAll: ')' !
!

"============================================="

! Object methods !
visit: aBlock
  "Visit one thing"
  ^aBlock value: self !!

! Collection methods !
visit: aBlock
  "Visit a collection of thigns"
  self do: [:x|
    x visit: aBlock]!!

! String methods !
visit: aBlock
  aBlock value: self !!

! Magic methods !
visit: aBlock
  "To heck with encapulation. Walk over the instance vars."
  | num |
  num := self class instSize + self basicSize.
  1 to: num do: [:i | 
     (self instVarAt: i) visit: aBlock ]
!!
  
! Object class methodsFor: 'testing' !
goodVisit
    |x y z all|
    
    x := (Employee new)  name: 'tammy'.
    y := (Employee new)  name: 'tammy'.
    z := {1. 2. #b. 3. {x. x. x. {y.}.}. 4. {{{5.}.}.}.}.
    "z visit: [:n| n oo].
    "
    (z at: 5) visit: [:x | x oo].
    
    1
!!

! Object methods !
stop: at because: other
  ((at x s left: 5), '     ',( 'see ', other)) oo
!
hop: aBlock
  ^self hop: aBlock 
        stop: [:at :because| self stop: at because: cause] 
        at:  0@0 
        seen: IdentityDictionary new!!

hop: aBlock stop: aStop at: at seen: seen
  | old |
  at x: at x + 1.
  old := seen at: self ifAbsent: [nil]
  old isNil
    ifTrue: [ at y: at y+ 1.
              seen at: self put: at x.
              ^aBlock value: self at: at] 
    ifTrue:  [^aStop value: at value: old] !
!

! Collection methods !
hop: aBlock at: at seen: seen
  (seen includes: self) 

  self do: [:x|
    x hop: aBlock at: at+(1@1) ]!!
      

